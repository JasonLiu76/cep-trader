#summary One-sentence summary of this page.

= AlgoTrader Sample Application =

The sample application is built on the following technologies:
 * CEP-Engine (using Esper)
 * Persistence (using Hibernate and MySql)
 * Modell Driven Architecture (Design using UML and  Code-Generation using AndroMDA)
 * Service Oriented Architecture (using Springframework)

The sample application can be checked from: 
 * Base Framework: https://cep-trader.googlecode.com/svn/trunk/AlgoTraderLight
 * Example Strategy: https://cep-trader.googlecode.com/svn/trunk/AlgoTraderMov

Installation-Instructions are provided under
 * /AlgoTraderLight/doc/INSTALLATION.txt

The UML model of the application can be viewed here:
[http://cep-trader.googlecode.com/files/AlgoTrader.pdf UML Model]

The application contains the following POJO-Entities:
 * Tick
 * Security
 * SecurityFamily (containing Security  Metadata)
 * Transaction
 * Position
 * Strategy
 * WatchListItem

The following SOA-Services provide the functionality of the system:
 * TickService (handling CSV-Files as well as Watchlist)
 * TransactionService(handling Orders and Executions)
 * PositionService (handling positions, Stop-Losses and Margin)
 * RuleService (Esper engine abstraction)
 * SimulationService (coordination of BackTesting)
 * LookupService (general lookup functionality)

The sample Strategy uses a very simple Moving-Average Indicator and some trailing stop losses. 

The application does not contain any Broker-Adapters. 

Note 1:
The source-code under /AlgoTraderLight/target has been generated from UML using AndroMDA. 

Note 2:
This sample application contains just the very basic core of the proprietary framework. At a later time additional contributions in the following areas are possible:
 * Currency and Forex Handling (incl. Forex-Hedge and Rebalance)
 * Interest Rate and Dividend Handling
 * Modeled functionality of the share classes: Stocks, Bonds, Inrest Rate, Forex, Future & Stock Option
 * Stock Option and Future Pricing Engines (for Backtesting of Option and Future Based Strategies)
 * Runtime-Client using JMX & Swing (based on JConsole)
 * Historical Data Retrieval
 * Generic Broker Adapter
 * Rebalancing between Strategies
 * Separation of framework and strategies into separate VMâ€™s (using RMI and Esper-Socket)
 * Automatic Parameter Optimization of Trading Strategies
 * Risk Management Features (Max Margin, Trailing Stop-Loss, Max Loss, Overnight CVaR, Max Leverage, Max monthly Draw-Down)